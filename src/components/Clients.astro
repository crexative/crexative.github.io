---
const clients = [
  {
    name: "TechStart Inc",
    logo: "/images/clients/techstart.svg",
    industry: "Technology"
  },
  {
    name: "InnovateCorp",
    logo: "/images/clients/innovate.svg",
    industry: "Innovation"
  },
  {
    name: "GrowthLab",
    logo: "/images/clients/growthlab.svg",
    industry: "Marketing"
  },
  {
    name: "FinTech Solutions",
    logo: "/images/clients/fintech.svg",
    industry: "Finance"
  },
  {
    name: "EcoSmart",
    logo: "/images/clients/ecosmart.svg",
    industry: "Sustainability"
  },
  {
    name: "HealthTech",
    logo: "/images/clients/healthtech.svg",
    industry: "Healthcare"
  },
  {
    name: "EduPlatform",
    logo: "/images/clients/eduplatform.svg",
    industry: "Education"
  },
  {
    name: "RetailMax",
    logo: "/images/clients/retailmax.svg",
    industry: "E-commerce"
  }
];

const stats = [
  {
    number: "50+",
    label: "Happy Clients",
    icon: "users"
  },
  {
    number: "100+",
    label: "Projects Delivered",
    icon: "briefcase"
  },
  {
    number: "5+",
    label: "Years Experience",
    icon: "calendar"
  },
  {
    number: "98%",
    label: "Client Satisfaction",
    icon: "star"
  }
];
---

<section class="clients" itemscope itemtype="https://schema.org/Organization">
  <div class="container">
    <div class="section-header">
      <p class="subtitle">TRUSTED BY</p>
      <h2>COMPANIES WE'VE <span class="primary-color">WORKED WITH</span></h2>
      <p class="section-description">
        We're proud to partner with innovative companies across various industries to deliver exceptional digital solutions.
      </p>
    </div>
    
    <div class="clients-showcase">
      <div class="clients-grid">
        {clients.map((client) => (
          <div class="client-card" itemscope itemtype="https://schema.org/Organization">
            <div class="client-logo">
              <img 
                src={client.logo} 
                alt={`${client.name} logo`}
                width="120"
                height="60"
                loading="lazy"
                itemprop="logo"
              />
            </div>
            <div class="client-info">
              <h3 itemprop="name">{client.name}</h3>
              <p class="industry" itemprop="industry">{client.industry}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
    
    <div class="stats-section">
      <div class="stats-grid">
        {stats.map((stat) => (
          <div class="stat-card">
            <div class="stat-icon">
              {stat.icon === 'users' && (
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                  <circle cx="12" cy="7" r="4"></circle>
                </svg>
              )}
              {stat.icon === 'briefcase' && (
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect>
                  <path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path>
                </svg>
              )}
              {stat.icon === 'calendar' && (
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                  <line x1="16" y1="2" x2="16" y2="6"></line>
                  <line x1="8" y1="2" x2="8" y2="6"></line>
                  <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
              )}
              {stat.icon === 'star' && (
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26 12,2"></polygon>
                </svg>
              )}
            </div>
            <div class="stat-content">
              <div class="stat-number" data-target={stat.number}>{stat.number}</div>
              <div class="stat-label">{stat.label}</div>
            </div>
          </div>
        ))}
      </div>
    </div>
    
    <div class="clients-cta">
      <div class="cta-content">
        <h3>Ready to join our success stories?</h3>
        <p>Let's discuss how we can help transform your business with innovative digital solutions.</p>
        <a href="#contact" class="btn btn-primary">Start Your Project</a>
      </div>
    </div>
  </div>
</section>

<style>
  .clients {
    padding: 120px 0;
    background: white;
    position: relative;
  }
  
  .section-header {
    text-align: center;
    margin-bottom: 80px;
  }
  
  .subtitle {
    font-size: 14px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 3px;
    margin-bottom: 16px;
    color: var(--primary-color);
    font-family: 'Inter', sans-serif;
  }
  
  .section-description {
    max-width: 600px;
    margin: 20px auto 0;
    font-size: 18px;
    line-height: 1.7;
    color: var(--text-gray);
  }
  
  .clients-showcase {
    margin-bottom: 100px;
  }
  
  .clients-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 40px;
    margin-bottom: 60px;
  }
  
  .client-card {
    background: var(--bg-secondary);
    border-radius: 16px;
    padding: 32px 24px;
    text-align: center;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border: 1px solid var(--border-color);
    position: relative;
    overflow: hidden;
  }
  
  .client-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(0, 225, 199, 0.1), transparent);
    transition: left 0.6s ease;
  }
  
  .client-card:hover::before {
    left: 100%;
  }
  
  .client-card:hover {
    transform: translateY(-8px);
    box-shadow: var(--shadow-lg);
    border-color: var(--primary-color);
  }
  
  .client-logo {
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 20px;
  }
  
  .client-logo img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    filter: grayscale(100%) opacity(0.7);
    transition: filter 0.3s ease;
  }
  
  .client-card:hover .client-logo img {
    filter: grayscale(0%) opacity(1);
  }
  
  .client-info h3 {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 8px;
    color: var(--text-color);
    font-family: 'Inter', sans-serif;
  }
  
  .industry {
    font-size: 14px;
    color: var(--text-gray);
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 500;
  }
  
  .stats-section {
    padding: 80px 0;
    background: var(--gradient-primary);
    border-radius: 24px;
    margin-bottom: 80px;
    position: relative;
    overflow: hidden;
  }
  
  .stats-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Ccircle cx='30' cy='30' r='4'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    opacity: 0.3;
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 40px;
    position: relative;
    z-index: 2;
  }
  
  .stat-card {
    text-align: center;
    color: white;
  }
  
  .stat-icon {
    color: rgba(255, 255, 255, 0.9);
    margin: 0 auto 20px;
    width: 64px;
    height: 64px;
    background: rgba(255, 255, 255, 0.15);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(10px);
  }
  
  .stat-number {
    font-size: 48px;
    font-weight: 800;
    margin-bottom: 8px;
    color: white;
    font-family: 'Inter', sans-serif;
  }
  
  .stat-label {
    font-size: 16px;
    font-weight: 500;
    color: rgba(255, 255, 255, 0.9);
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  
  .clients-cta {
    text-align: center;
    padding: 60px 40px;
    background: var(--bg-tertiary);
    border-radius: 24px;
    border: 1px solid var(--border-color);
  }
  
  .cta-content h3 {
    font-size: 32px;
    margin-bottom: 16px;
    color: var(--text-color);
  }
  
  .cta-content p {
    font-size: 18px;
    margin-bottom: 32px;
    color: var(--text-gray);
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .btn {
    display: inline-flex;
    align-items: center;
    padding: 16px 32px;
    border-radius: 50px;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 16px;
    cursor: pointer;
    border: 2px solid transparent;
  }
  
  .btn-primary {
    background: var(--gradient-primary);
    color: white;
  }
  
  .btn-primary:hover {
    transform: translateY(-3px);
    box-shadow: var(--shadow-xl);
  }
  
  @media (max-width: 768px) {
    .clients {
      padding: 80px 0;
    }
    
    .clients-grid {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 24px;
    }
    
    .client-card {
      padding: 24px 16px;
    }
    
    .stats-section {
      padding: 60px 20px;
    }
    
    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 32px;
    }
    
    .stat-number {
      font-size: 36px;
    }
    
    .clients-cta {
      padding: 40px 24px;
    }
    
    .cta-content h3 {
      font-size: 24px;
    }
  }
</style>

<script>
  // Animate numbers when they come into view
  document.addEventListener('DOMContentLoaded', function() {
    const statNumbers = document.querySelectorAll('.stat-number');
    
    const animateValue = (element, start, end, duration) => {
      let startTimestamp = null;
      const step = (timestamp) => {
        if (!startTimestamp) startTimestamp = timestamp;
        const progress = Math.min((timestamp - startTimestamp) / duration, 1);
        const value = Math.floor(progress * (end - start) + start);
        
        if (element.dataset.target.includes('%')) {
          element.textContent = value + '%';
        } else if (element.dataset.target.includes('+')) {
          element.textContent = value + '+';
        } else {
          element.textContent = value;
        }
        
        if (progress < 1) {
          window.requestAnimationFrame(step);
        }
      };
      window.requestAnimationFrame(step);
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const target = entry.target;
          const finalValue = parseInt(target.dataset.target.replace(/\D/g, ''));
          animateValue(target, 0, finalValue, 2000);
          observer.unobserve(target);
        }
      });
    });
    
    statNumbers.forEach((number) => {
      observer.observe(number);
    });
  });
</script>